name: RPM Build

env:
  EL8_VERSION: 8
  EL9_VERSION: 9
  DEBIAN_VERSION: 12
  UBUNTU_VERSION: 22.04
  CP_SKIP_UNIT_TEST_EL9: true
  CP_SKIP_UNIT_TEST_DEBIAN12: true
  CP_SKIP_UNIT_TEST_UBUNTU22: true

on:
  workflow_dispatch:
    inputs:
      pr-repos:
        description: 'Any PR-repos that you want included in this build'
        required: false
  pull_request:

concurrency:
  group: rpm-build-${{ github.head_ref  || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -ueo pipefail {0}

permissions: {}

jobs:
  # it's a real shame that this step is even needed.  push events have the commit message # in
  # ${{ github.event.head_commit.message }} but pull_requests don't.  :-(
  Import-commit-message:
    name: Get commit message
    if: github.repository == 'daos-stack/daos'
    runs-on: [self-hosted, light]
    # Map a step output to a job output
    outputs:
      message: ${{ steps.commit_message.outputs.text }}
      dequoted_message: ${{ steps.dequoted_commit_message.outputs.text }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Import Commit Message
        id: commit_message
        run: echo "text<<EOF" >> $GITHUB_OUTPUT;
             git show -s --format=%B >> $GITHUB_OUTPUT;
             echo "EOF" >> $GITHUB_OUTPUT;
      - name: Import and Dequote Commit Message
        id: dequoted_commit_message
        run: . ci/gha_functions.sh;
             echo "text<<EOF" >> $GITHUB_OUTPUT;
             git show -s --format=%B | escape_single_quotes >> $GITHUB_OUTPUT;
             echo "EOF" >> $GITHUB_OUTPUT;
      - name: Identify Commit Pragmas
        run: . ci/gha_functions.sh;
             echo '${{ steps.dequoted_commit_message.outputs.text }}' | get_commit_pragmas

  Import-commit-pragmas:
    name: Make commit pragma variables
    runs-on: [self-hosted, light]
    needs: [Import-commit-message]
    # can't use matrixes for matrixed output yet
    # https://github.com/actions/runner/pull/2477
    outputs:
      rpm-test-version: ${{ steps.rpm-test-version.outputs.value }}
      pr-repos: ${{ steps.pr-repos.outputs.value }}
      run-gha: ${{ steps.run-gha.outputs.value }}
    steps:
      - name: Set rpm-test-version variable
        id: rpm-test-version
        uses: ./.github/actions/variable-from-pragma
        with:
          commit_message: ${{ needs.Import-commit-message.outputs.dequoted_message }}
          pragma: RPM_TEST_VERSION
      - name: Set pr-repos variable
        id: pr-repos
        uses: ./.github/actions/variable-from-pragma
        with:
          commit_message: ${{ needs.Import-commit-message.outputs.dequoted_message }}
          pragma: PR_REPOS
      - name: Set run-gha variable
        id: run-gha
        uses: ./.github/actions/variable-from-pragma
        with:
          commit_message: ${{ needs.Import-commit-message.outputs.dequoted_message }}
          pragma: RUN_GHA
          default: false

  Create-symlinks:
    # you might think this is an odd place to do this and it should be done as a result of the
    # build stages and ideally you'd be right.
    # the problem with that is that there is no way to get the success/fail result of individual
    # axes of matrix jobs so there is no way to query them at the end and see their composite
    # results.
    # instead, the final result of the Build-RPM job, for example is a last-one-complete wins.
    # so for example, if the el9 axis fails quickly and then the el8 axis succeeds afterward the
    # resulting job state is success.
    # instead we assume success at the beginning and then let any axis that fails remove the
    # lastSuccessfulBuild link if it fails
    name: Create lastBuild and lastSuccessfulBuild symlinks
    runs-on: [self-hosted, light]
    needs: [Import-commit-pragmas]
    if: needs.Import-commit-pragmas.outputs.run-gha == 'true' &&
        needs.Import-commit-pragmas.outputs.rpm-test-version == '' &&
        !contains(needs.Import-commit-pragmas.outputs.pr-repos, 'daos@')
    env:
      # TODO -- this should be on stable, backedup storage, not /tmp
      # yamllint disable-line rule:line-length
      REPO_PATH: /tmp/job_repos/daos-stack/job/daos/job/PR-${{ github.event.pull_request.number }}
    steps:
      - name: Create lastBuild and lastSuccessfulBuild symlinks
        run: . ci/gha_functions.sh;
               mkdir -p ${REPO_PATH};
               rm -f ${REPO_PATH}/last{,Successful}Build;
               ln -s ${{ github.run_number }} ${REPO_PATH}/lastBuild;
               ln -s ${{ github.run_number }} ${REPO_PATH}/lastSuccessfulBuild

  Calc-rpm-build-matrix:
    name: Calculate RPM Build Matrix
    runs-on: [self-hosted, gcp]
    needs: [Import-commit-pragmas, Create-symlinks]
    outputs:
      matrix: ${{ steps.matrix.outputs.text }}
    steps:
      - name: Import commit pragmas
        uses: ./.github/actions/import-commit-pragmas
      - name: Calculate RPM Build Matrix
        id: matrix
        run: |  # do not use the non-| format for this script
             l=()
             trap 'echo "text=[$(IFS=","; echo "${l[*]}")]" >> $GITHUB_OUTPUT' EXIT
             if ${CP_SKIP_BUILD:-false}; then
                 exit 0
             fi
             if ! ${CP_SKIP_BUILD_EL8_RPM:-false}; then
                 l+=('"el8"')
             fi
             if ! ${CP_SKIP_BUILD_EL9_RPM:-false}; then
                 l+=('"el9"')
             fi
             if ! ${CP_SKIP_BUILD_DEB12_RPM:-false}; then
                 l+=('"deb12"')
             fi
             if ! ${CP_SKIP_BUILD_UBUNTU22_RPM:-false}; then
                 l+=('"ubuntu22"')
             fi

  Build-RPM:
    name: Build RPM
    permissions:
      statuses: write
    runs-on: [self-hosted, gcp]
    needs: [Create-symlinks, Import-commit-pragmas, Calc-rpm-build-matrix]
    if: needs.Import-commit-pragmas.outputs.run-gha == 'true' &&
        needs.Create-symlinks.result == 'success' &&
        ((!cancelled()) || success() || failure())
    strategy:
      matrix:
        distro: ${{ fromJSON(needs.Calc-rpm-build-matrix.outputs.matrix) }}
      fail-fast: false
    env:
      DISTRO_NAME:
      DISTRO_VERSION:
      REPO_PATH: /tmp/job_repos/daos-stack/job/daos/job/PR-${{ github.event.pull_request.number }}
    steps:
      - name: Import commit pragmas
        uses: ./.github/actions/import-commit-pragmas
      - name: Set variables
        run: |
            GO_BUILDER=""
            DOCKER_FOLDER="utils/docker/gcp/client/base"
            case ${{ matrix.distro }} in
                'el8')
                    DOCKERFILE="${DOCKER_FOLDER}/el/Dockerfile"
                    BASE_IMAGE_BUILDER="rockylinux/rockylinux:${{ env.EL8_VERSION }}"
                    DISTRO_NAME="EL"
                    DISTRO_VERSION="${{ env.EL8_VERSION }}"
                    ;;
                'el9')
                    DOCKERFILE="${DOCKER_FOLDER}/el/Dockerfile"
                    BASE_IMAGE_BUILDER="rockylinux/rockylinux:${{ env.EL9_VERSION }}"
                    DISTRO_NAME="EL"
                    DISTRO_VERSION="${{ env.EL9_VERSION }}"
                    ;;
                'deb12')
                    DOCKERFILE="${DOCKER_FOLDER}/deb/Dockerfile"
                    BASE_IMAGE_BUILDER="debian:${{ env.DEBIAN_VERSION }}"
                    GO_BUILDER="google-go.pkg.dev/golang:1.22.4"
                    DISTRO_NAME="DEBIAN"
                    DISTRO_VERSION="${{ env.DEBIAN_VERSION }}"
                    ;;
                'ubuntu22')
                    DOCKERFILE="${DOCKER_FOLDER}/deb/Dockerfile"
                    BASE_IMAGE_BUILDER="ubuntu:${{ env.UBUNTU_VERSION }}"
                    GO_BUILDER="google-go.pkg.dev/golang:1.22.4"
                    DISTRO_NAME="DEBIAN"
                    DISTRO_VERSION="${{ env.UBUNTU_VERSION }}"
                    ;;
            esac
            DISTRO_NAME_LOWER=$(echo $DISTRO_NAME | tr '[:upper:]' '[:lower:]')
            echo "DOCKERFILE=$DOCKERFILE" >> $GITHUB_ENV
            echo "BASE_IMAGE_BUILDER=$BASE_IMAGE_BUILDER" >> $GITHUB_ENV
            echo "GO_BUILDER=$GO_BUILDER" >> $GITHUB_ENV
            echo "DISTRO_NAME=$DISTRO_NAME" >> $GITHUB_ENV
            echo "DISTRO_NAME_LOWER=$DISTRO_NAME_LOWER" >> $GITHUB_ENV
            echo "DISTRO_VERSION=$DISTRO_VERSION" >> $GITHUB_ENV
            echo "STAGE_NAME=Build RPM on $DISTRO_NAME $DISTRO_VERSION" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Remove Dockerignore file
        # necessary because our Dockerfile assumes /daos is our build context
        # but the .dockerignore file ignores many files we need in our RPM
        id: rm-dockerignore
        run: rm -f .dockerignore && touch .dockerignore
      - name: Build RPM
        id: build-rpm
        continue-on-error: true
        # yamllint disable rule:line-length
        run: sudo docker build . --file "${DOCKERFILE}"
            --build-arg BASE_IMAGE_BUILDER="${BASE_IMAGE_BUILDER}"
            --build-arg GO_BUILDER="${GO_BUILDER}"
            --build-arg DAOS_BUILD_TYPE=release
            --build-arg DAOS_SRC_DIR="."
            --tag "gha-${DISTRO_NAME_LOWER}-${DISTRO_VERSION}-${{ github.run_id }}-${{ github.run_attempt }}-base"
      - name: Remove lastSuccessfulBuild link and exit failure
        if: steps.build-rpm.outcome != 'success'
        run: rm -f ${REPO_PATH}/lastSuccessfulBuild;
             exit 1
      - name: Publish RPMs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DISTRO_NAME }} ${{ env.DISTRO_VERSION }} RPM repository
          path: ${{ env.REPO_PATH }}/${{ github.run_number }}/artifact/artifacts/${{ env.TARGET }}
      - name: Update commit status
        uses: ouzi-dev/commit-status-updater@v2
        with:
          # yamllint disable-line rule:line-length
          name: 'build/Build RPM on ${{ env.DISTRO_NAME }} ${{ env.COMMIT_STATUS_DISTRO_VERSION && env.COMMIT_STATUS_DISTRO_VERSION || env.DISTRO_VERSION }}'
          status: "${{ job.status }}"

  Calc-unit-matrix:
    name: Calculate Unit Testing Matrix
    runs-on: [self-hosted, gcp]
    needs: [Import-commit-pragmas]
    if: needs.Import-commit-pragmas.outputs.run-gha == 'true' &&
        ((!cancelled()) || success() || failure())
    outputs:
      matrix: ${{ steps.matrix.outputs.text }}
    steps:
      - name: Import commit pragmas
        uses: ./.github/actions/import-commit-pragmas
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Calculate Unit Testing Matrix
        id: matrix
        run: |  # do not use the non-| format for this script
              . ci/gha_functions.sh
              set -eu
              # it might seem tempting to factor in the result of the build for this
              # distro here and not include a failed build in the test matrix but
              # the problem with that is that if/when the user asks GHA to rebuild
              # all failed jobs and a previously failed RPM job is successful, the
              # test matrix won't include testing it since it was calculated and was
              # successful on the previous run without the failed build stage in it
              l=()
              trap 'echo "text=[$(IFS=","; echo "${l[*]}")]" >> $GITHUB_OUTPUT' EXIT
              if ${CP_SKIP_UNIT_TEST:-false}; then
                  exit 0
              fi

                  if ! ${CP_SKIP_BUILD_EL8_RPM:-false} &&
                    ! ${CP_SKIP_UNIT_TEST_EL8:-false}; then
                      # it would definitely be nicer to get these into the environment
                      # as unquoted strings so that we didn't have to double quote here
                      l+=('"el8"')
                  fi
                  if ! ${CP_SKIP_BUILD_EL9_RPM:-false} &&
                    ! ${CP_SKIP_UNIT_TEST_EL9:-false}; then
                      l+=('"el9"')
                  fi
                  if ! ${CP_SKIP_BUILD_DEBIAN12_RPM:-false} &&
                    ! ${CP_SKIP_UNIT_TEST_DEBIAN12:-false}; then
                      l+=('"deb12"')
                  fi
                  if ! ${CP_SKIP_BUILD_UBUNTU22_RPM:-false} &&
                    ! ${CP_SKIP_UNIT_TEST_UBUNTU22:-false}; then
                      l+=('"ubuntu22"')
                  fi
              fi

  Unit:
    name: Unit Testing
    # note: if we decide to expand unit testing to the other OSes, we might
    # want to pull this whole job out as a reusable workflow so we can more
    # easily/clearly have the OS run on match the Docker OS
    runs-on: [self-hosted, gcp, el8]
    permissions:
      statuses: write
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
    timeout-minutes: 7200
    needs: [Build-RPM, Import-commit-message, Calc-unit-matrix, Import-commit-pragmas]
    strategy:
      matrix:
        distro: ${{ fromJSON(needs.Calc-unit-matrix.outputs.matrix) }}
      fail-fast: false
    # https://github.com/actions/runner/issues/491#issuecomment-926924523
    if: |
      needs.Import-commit-pragmas.outputs.run-gha == 'true' &&
      needs.Calc-unit-matrix.outputs.matrix != '[]' &&
      (!cancelled()) &&
      (needs.Build-RPM.result == 'success' ||
        needs.Build-RPM.result == 'skipped')
    steps:
      - name: Set variables
        run: |
            IMAGE_VERSION=""
            DOCKER_FOLDER="utils/docker/gcp/client/testing"
            case ${{ matrix.distro }} in
                'el8')
                    DOCKERFILE="${DOCKER_FOLDER}/el/Dockerfile"
                    DISTRO_NAME="EL"
                    DISTRO_VERSION="${{ env.EL8_VERSION }}"
                    TEST_IMAGE="rockylinux/rockylinux:8"
                    IMAGE_VERSION="rocky8"
                    ;;
                'el9')
                    DOCKERFILE="${DOCKER_FOLDER}/el/Dockerfile"
                    DISTRO_NAME="EL"
                    DISTRO_VERSION="${{ env.EL9_VERSION }}"
                    TEST_IMAGE="rockylinux/rockylinux:9"
                    IMAGE_VERSION="rocky9"
                    ;;
                'deb12')
                    DOCKERFILE="${DOCKER_FOLDER}/deb/Dockerfile"
                    DISTRO_NAME="DEBIAN"
                    DISTRO_VERSION="${{ env.DEBIAN_VERSION }}"
                    TEST_IMAGE="debian:12.7"
                    ;;
                'ubuntu22')
                    DOCKERFILE="${DOCKER_FOLDER}/udebbuntu/Dockerfile"
                    DISTRO_NAME="UBUNTU"
                    DISTRO_VERSION="${{ env.UBUNTU_VERSION }}"
                    TEST_IMAGE="ubuntu:jammy-20240911.1"
                    ;;
            esac
            echo "DOCKERFILE=$DOCKERFILE" >> $GITHUB_ENV
            echo "DISTRO_NAME=$DISTRO_NAME" >> $GITHUB_ENV
            echo "DISTRO_NAME_LOWER=$(echo $DISTRO_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
            echo "DISTRO_VERSION=$DISTRO_VERSION" >> $GITHUB_ENV
            echo "TEST_IMAGE=$TEST_IMAGE" >> $GITHUB_ENV
            echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
            echo "STAGE_NAME=Unit Test on $DISTRO_NAME $DISTRO_VERSION" >> $GITHUB_ENV
            echo "BASE_IMAGE=gha-${DISTRO_NAME_LOWER}-${DISTRO_VERSION}-${{ github.run_id }}-${{ github.run_attempt }}-base" >> $GITHUB_ENV
            echo "IMAGE_TYPE=unit_tests" >> $GITHUB_ENV
            echo "ARTIFACTS_DIR=$REPO_PATH" >> $GITHUB_ENV
            echo "RESULTS_DIR=unit_test_results" >> $GITHUB_ENV
            echo "GHA=true" >> $GITHUB_ENV
      - name: Build unit testing image
        run:
          docker build . --file "${DOCKERFILE}"
            --build-arg TEST_IMAGE="${TEST_IMAGE}"
            --build-arg IMAGE_VERSION="${IMAGE_VERSION}"
            --build-arg BASE_IMAGE="${BASE_IMAGE}"
            --build-arg IMAGE_TYPE="${IMAGE_TYPE}"
            --build-arg GHA="${GHA}"
            --tag "${IMAGE_TYPE}:${DISTRO_NAME_LOWER}-${DISTRO_VERSION}-${{ github.run_id }}-${{ github.run_attempt }}"
      - name: Run Unit Testing
        run: docker run
            --mount type=tmpfs,destination=/mnt/daos,tmpfs-size=16G
            -e RESULTS_DIR="${RESULTS_DIR}"
            -e ARTIFACTS_DIR="${ARTIFACTS_DIR}"
            "${IMAGE_TYPE}:${DISTRO_NAME_LOWER}-${DISTRO_VERSION}-${{ github.run_id }}-${{ github.run_attempt }}"
            cd daos && /daos/utils/ci/gcp/run_unit_tests.sh
