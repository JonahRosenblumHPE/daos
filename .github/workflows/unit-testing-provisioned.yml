name: Unit Testing Provisioned

env:
  # TODO: we really need to define a list of supported versions (ideally it's no more than 2)
  #       build is done on the lowest version and test on the highest with a "sanity test"
  #       stage done on all versions in the list ecept the highest
  EL8_BUILD_VERSION: 8.6
  EL8_VERSION: 8.8
  EL9_BUILD_VERSION: 9
  EL9_VERSION: 9
  LEAP15_VERSION: 15.5

on:
  pull_request:

concurrency:
  group: unit-testing-provisioned-${{ github.head_ref  || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -ueo pipefail {0}

permissions: {}

jobs:
  Job_1:
    name: Job 1
    runs-on: [self-hosted, wolf]
    permissions:
      statuses: write
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
    timeout-minutes: 7200
    env:
      OPERATIONS_EMAIL: ryon.jensen@intel.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 500
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Run Ryon's Simple Script
        timeout-minutes: 7200
        id: run-test
        run: |
          . ci/gha_functions.sh
          ci/functional/ryon.sh
  Import-commit-message:
    name: Get commit message
    if: github.repository == 'daos-stack/daos'
    runs-on: [self-hosted, light]
    # Map a step output to a job output
    outputs:
      message: ${{ steps.commit_message.outputs.text }}
      dequoted_message: ${{ steps.dequoted_commit_message.outputs.text }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Import Commit Message
        id: commit_message
        run: echo "text<<EOF" >> $GITHUB_OUTPUT;
          git show -s --format=%B >> $GITHUB_OUTPUT;
          echo "EOF" >> $GITHUB_OUTPUT;
      - name: Import and Dequote Commit Message
        id: dequoted_commit_message
        run: . ci/gha_functions.sh;
          echo "text<<EOF" >> $GITHUB_OUTPUT;
          git show -s --format=%B | escape_single_quotes >> $GITHUB_OUTPUT;
          echo "EOF" >> $GITHUB_OUTPUT;
      - name: Identify Commit Pragmas
        run: . ci/gha_functions.sh;
          echo '${{steps.dequoted_commit_message.outputs.text }}' | get_commit_pragmas


  Job_2:
    name: Provisioning Job
    runs-on: [self-hosted, wolf]
    permissions:
      statuses: write
      # https://github.com/EnricoMi/publish-unit-test-result-action#permissions
      checks: write
      pull-requests: write
    timeout-minutes: 7200
    env:
      OPERATIONS_EMAIL: ryon.jensen@intel.com
      JENKINS_URL: https://build.hpdd.intel.com/
      LABEL: ci_vm9
      DISTRO_WITH_VERSION: el8
      CHROOT_NAME: "rocky+epel-8-x86_64"
      DISTRO_NAME: "EL"
      DISTRO_VERSION: "8.6"
      COMMIT_STATUS_DISTRO_VERSION: "8"
      STAGE_TAGS: "-vm"
      FTEST_ARG: ""
      DISTRO_NAME_UPPER: "EL"
      DISTRO_NAME_LOWER: "el"
      DISTRO_VERSION_MAJOR: "8"
      OPENMPI: "openmpi"
      DISTRO: "el8"
      DAOS_STACK_EL_8_LOCAL_REPO: "not_used"
      CP_PRIORITY: ""
      PROVISION_DISTRO: "EL_8"
      CP_PR_REPOS: ""
      ARTIFACTS_URL: file:///scratch/job_repos/
      COMMIT_MESSAGE: ${{ needs.Import-commit-message.outputs.message }}
      REPO_FILE_URL: https://artifactory.dc.hpdd.intel.com/artifactory/repo-files/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 500
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Request and Provision a Cluster
#        if: ${{ inputs.condition }}
        shell: bash
        run: |
          . ci/gha_functions.sh
          STAGE_NAME='${{ env.STAGE_NAME }}'
          REQID='${{ github.event.pull_request.number }}-${{ github.run_number }}'
          CP_PRIORITY=${{ env.CP_PRIORITY }}
          if ! JENKINS_URL='${{ env.JENKINS_URL }}'                   \
               LABEL='${{ env.LABEL }}'                               \
               PRIORITY=${CP_PRIORITY:-3}                             \
               provision_cluster "$STAGE_NAME" "${{ github.run_id }}" \
                                 "${{ runner.name }}"                 \
                                 "$REQID-${STAGE_NAME// /_}"; then
               echo "Failed to provision cluster"
               exit 1
          fi
      - name: Wait for nodes to be ready
#        if: ${{ inputs.condition }}
        shell: bash
        run: . ci/gha_functions.sh;
          set -eux;
          wait_nodes_ready
      - name: Post-provision cluster
#        if: ${{ inputs.condition }}
        shell: bash
        run: |
          . ci/gha_functions.sh
          inst_repos="${{ env.CP_PR_REPOS }} ${{ github.event.inputs.pr-repos }}"
          if [ -z "${{ env.CP_RPM_TEST_VERSION }}" ] &&
          [[ $inst_repos != *daos@* ]]; then
           inst_repos+=" daos@PR-${{ github.event.pull_request.number }}"
           inst_repos+=":${{ github.run_number }}"
          fi
          ARTIFACTS_URL=$ARTIFACTS_URL                                      \
          INST_REPOS="$(eval echo "$inst_repos")"                           \
          DISTRO=$PROVISION_DISTRO ci/provisioning/post_provision_config.sh

      - name: Run Ryon's Simple Script Again
        timeout-minutes: 7200
        id: run-test
        run: |
          . ci/gha_functions.sh
          ci/functional/ryon.sh