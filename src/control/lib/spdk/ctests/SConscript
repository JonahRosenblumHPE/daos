"""Build go-spdk bindings C tests"""
import os


def scons():
    """Execute build"""
    Import('senv', 'prereqs', 'control_tgts', 'nc_obj', 'ncc_obj')

    unit_env = senv.Clone()
    unit_env.require('pmdk', 'spdk', 'isal')

    unit_env.AppendUnique(OBJPREFIX='c_')

    spdk_src = prereqs.get_src_path("spdk")
    nvme_lib_src = os.path.join(spdk_src, 'lib', 'nvme')
    spdk_incl_src = os.path.join(spdk_src, 'include')

    # spdk/lib/nvme to expose normally opaque types during tests
    unit_env.AppendUnique(CPPPATH=[nvme_lib_src, spdk_incl_src])

    # Explicitly link RTE & SPDK libs for CGO access
    libs = ['nvme_control', 'spdk_bdev', 'spdk_bdev_aio', 'spdk_bdev_nvme', 'spdk_blob',
            'spdk_nvme', 'spdk_sock', 'spdk_log', 'spdk_notify', 'spdk_blob_bdev', 'spdk_vmd',
            'spdk_event_bdev', 'spdk_init', 'spdk_accel', 'spdk_thread', 'spdk_util', 'spdk_dma',
            'spdk_keyring', 'spdk_json', 'spdk_jsonrpc', 'spdk_rpc', 'spdk_trace', 'spdk_env_dpdk',
            'rte_mempool', 'rte_mempool_ring', 'rte_bus_pci', 'rte_pci', 'rte_ring', 'rte_mbuf',
            'rte_eal', 'rte_kvargs', 'rte_log', 'rte_telemetry']

    # Other libs
    libs += ['uuid', 'numa', 'dl', 'isal', 'cmocka', 'pthread', 'ssl', 'crypto']

    if GetOption('help'):
        return

    look_path = os.path.join(nvme_lib_src, 'nvme_internal.h')
    if os.path.isfile(look_path):
        testbin = unit_env.d_test_program('nvme_control_ctests',
                                          ['nvme_control_ut.c', nc_obj, ncc_obj, control_tgts],
                                          LIBS=libs)
        unit_env.Install("$PREFIX/bin", testbin)
    else:
        print(f'{look_path} missing, skipping nvme_control_ut build')


if __name__ == "SCons.Script":
    scons()
